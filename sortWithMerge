public void sortWithMerge(String by) {
        switch (by) {
            case "City":
                mergeSort(temperatures, Comparator.comparing(Temperature::getCity));
                break;
            case "High":
                mergeSort(temperatures, Comparator.comparingInt(Temperature::getHighTemperature));
                break;
            default:
                System.out.println("Invalid sorting criteria. Supported values are 'City' and 'High'.");
        }
    }

    private <T> void mergeSort(List<T> list, Comparator<T> comparator) {
        if (list.size() <= 1) {
            return;
        }

        int middle = list.size() / 2;
        List<T> left = new LinkedList<>(list.subList(0, middle));
        List<T> right = new LinkedList<>(list.subList(middle, list.size()));

        mergeSort(left, comparator);
        mergeSort(right, comparator);

        merge(list, left, right, comparator);
    }

    private <T> void merge(List<T> list, List<T> left, List<T> right, Comparator<T> comparator) {
        int leftIndex = 0;
        int rightIndex = 0;
        int currentIndex = 0;

        while (leftIndex < left.size() && rightIndex < right.size()) {
            if (comparator.compare(left.get(leftIndex), right.get(rightIndex)) < 0) {
                list.set(currentIndex, left.get(leftIndex));
                leftIndex++;
            } else {
                list.set(currentIndex, right.get(rightIndex));
                rightIndex++;
            }
            currentIndex++;
        }

        while (leftIndex < left.size()) {
            list.set(currentIndex, left.get(leftIndex));
            leftIndex++;
            currentIndex++;
        }

        while (rightIndex < right.size()) {
            list.set(currentIndex, right.get(rightIndex));
            rightIndex++;
            currentIndex++;
        }
    }
 
