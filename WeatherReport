// Constructor with one String parameter for file name
    public WeatherReport(String fileName) {
        temperatures = readTemperaturesFromFile(fileName);
    }

    // Helper method to generate test temperatures
    private List<Temperature> generateTestTemperatures() {
    	List<Temperature> temps = new LinkedList<>();
    	temps.add(new Temperature("City1", "State1", 20, 30));
        temps.add(new Temperature("City2", "State2", 25, 35));
        temps.add(new Temperature("City3", "State3", 18, 28));
        temps.add(new Temperature("City4", "State4", 22, 32));
        temps.add(new Temperature("City5", "State5", 15, 25));
        temps.add(new Temperature("City6", "State6", 28, 38));
        temps.add(new Temperature("City7", "State7", 19, 29));
        temps.add(new Temperature("City8", "State8", 23, 33));
        temps.add(new Temperature("City9", "State9", 26, 36));
        temps.add(new Temperature("City10", "State10", 17, 27));
         return temps;
    }

    // Helper method to read temperatures from file
    private List<Temperature> readTemperaturesFromFile(String fileName) {
        List<Temperature> temps = new LinkedList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            br.readLine(); // Skip header row

            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                String city = data[1];
                String state = data[10];
                int lowTemperature = Integer.parseInt(data[6]);
                int highTemperature = Integer.parseInt(data[5]);

                temps.add(new Temperature(city, state, lowTemperature, highTemperature));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return temps;
    }
